_require "basis.smi"
_require "ml-yacc-lib.smi"
_require "./Syntax.smi"
_require "./CoreML.grm.sig"
structure CoreMLLrVals =
struct
  structure Parser = struct
    type token (= boxed)
    type stream (= boxed)
    type result = Syntax.dec
    type pos = int
    type arg = unit
    exception ParseError
    val makeStream : {lexer:unit -> token} -> stream
    val getStream : stream -> token * stream
    val sameToken : token * token -> bool
    val parse : {lookahead:int, stream:stream,arg: arg,
                 error: (string * pos * pos -> unit)}
                -> result * stream
  end
  structure Tokens = struct
    type pos = Parser.pos
    type token = Parser.token
val EQ:  pos * pos -> token
val DIV:  pos * pos -> token
val SUB:  pos * pos -> token
val MUL:  pos * pos -> token
val ADD:  pos * pos -> token
val VAL:  pos * pos -> token
val THEN:  pos * pos -> token
val TRUE:  pos * pos -> token
val STRING: (string) *  pos * pos -> token
val SEMICOLON:  pos * pos -> token
val RPAREN:  pos * pos -> token
val LPAREN:  pos * pos -> token
val INT: (int) *  pos * pos -> token
val IF:  pos * pos -> token
val ID: (string) *  pos * pos -> token
val HASH2:  pos * pos -> token
val HASH1:  pos * pos -> token
val FUN:  pos * pos -> token
val FN:  pos * pos -> token
val FALSE:  pos * pos -> token
val EQUAL:  pos * pos -> token
val ELSE:  pos * pos -> token
val DARROW:  pos * pos -> token
val COMMA:  pos * pos -> token
val EOF:  pos * pos -> token
  end
end


